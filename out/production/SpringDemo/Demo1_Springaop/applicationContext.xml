<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 准备工作：导入aop（约束命名空间）-->
    <!--1.配置目标对象-->
    <bean name="userService" class="Demo1_service.UserSerivaeImpl"></bean>
    <!-- 2.配置通知对象-->
    <bean name="myAdvice" class="Demo1_Springaop.MyAdvice"></bean>
    <!--3.配置通知织入目标对象 -->
    <aop:config>
        <!--配置切入点
            public void Demo1_service.UserSerivaeImpl.save()
            void Demo1_service.UserSerivaeImpl.save()
            * Demo1_service.UserSerivaeImpl.save()
            * Demo1_service.UserSerivaeImpl.*()
            * Demo1_service.UserSerivaeImpl.*(..)
            最终形态
            * Demo1_service.*SerivaeImpl.*(..)
        -->
        <aop:pointcut id="pc"  expression="execution(* Demo1_service.*SerivaeImpl.*(..))"/>

        <aop:aspect ref="myAdvice">
            <!--指定名为before方法作为前置通知 -->
            <aop:before method="before" pointcut-ref="pc"/>
            <!--后置通知 -->
            <aop:after-returning method="afterReturning" pointcut-ref="pc"/>
            <!--环绕通知 -->
            <aop:around method="around" pointcut-ref="pc"/>
            <!--异常拦截通知 -->
            <aop:after-throwing method="afterException" pointcut-ref="pc"/>
            <!--后置通知 -->
            <aop:after method="after" pointcut-ref="pc"/>
        </aop:aspect>
    </aop:config>
</beans>